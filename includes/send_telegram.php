<?php
require_once __DIR__ . '/config.php';

header('Content-Type: application/json');

$referer = parse_url($_SERVER['HTTP_REFERER'] ?? '', PHP_URL_HOST);
if (empty($allowedDomains) || !in_array($referer, $allowedDomains)) {
    http_response_code(403);
    die(json_encode(['success' => false, 'message' => '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.']));
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    die(json_encode(['success' => false, 'message' => '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.']));
}

if (defined('MIN_FORM_SUBMIT_TIME') && isset($_SERVER['HTTP_X_FORM_SUBMIT_TIME'])) {
    $submitTime = (int)$_SERVER['HTTP_X_FORM_SUBMIT_TIME']; 
    if (time() - $submitTime < MIN_FORM_SUBMIT_TIME) {
        http_response_code(429);
        die(json_encode(['success' => false, 'message' => '–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.']));
    }
}

if (!empty($_POST['website'])) { 
    die(json_encode(['success' => true, 'message' => '–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.']));
}

if (!defined('RECAPTCHA_SECRET_KEY') || !defined('RECAPTCHA_THRESHOLD')) {
    http_response_code(500); 
    error_log("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: RECAPTCHA_SECRET_KEY –∏–ª–∏ RECAPTCHA_THRESHOLD –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.");
    die(json_encode(['success' => false, 'message' => '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.']));
}

if (empty($_POST['recaptcha_response'])) {
    http_response_code(400); 
    die(json_encode(['success' => false, 'message' => '–û—à–∏–±–∫–∞ reCAPTCHA: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.']));
}

$recaptchaUrl = 'https://www.google.com/recaptcha/api/siteverify';
$recaptchaData = [
    'secret'   => RECAPTCHA_SECRET_KEY,
    'response' => $_POST['recaptcha_response'],
    'remoteip' => $_SERVER['REMOTE_ADDR'] ?? null 
];

$ch = curl_init($recaptchaUrl);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($recaptchaData));
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 5);
$recaptchaResultJson = curl_exec($ch);
$curlError = curl_error($ch);
curl_close($ch);

if ($recaptchaResultJson === false) {
    http_response_code(503); 
    error_log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º reCAPTCHA. –û—à–∏–±–∫–∞: " . $curlError);
    die(json_encode(['success' => false, 'message' => '–û—à–∏–±–∫–∞ reCAPTCHA: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏.']));
}

$recaptchaResponse = json_decode($recaptchaResultJson);

if (!$recaptchaResponse || !isset($recaptchaResponse->success)) {
    http_response_code(500); 
    error_log("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ reCAPTCHA: " . $recaptchaResultJson);
    die(json_encode(['success' => false, 'message' => '–û—à–∏–±–∫–∞ reCAPTCHA: –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.']));
}

if (!$recaptchaResponse->success || (isset($recaptchaResponse->score) && $recaptchaResponse->score < RECAPTCHA_THRESHOLD)) {
    http_response_code(400); 
    error_log("–ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –£—Å–ø–µ—Ö: " . ($recaptchaResponse->success ? 'true' : 'false') . ". –û—Ü–µ–Ω–∫–∞: " . ($recaptchaResponse->score ?? 'N/A') . ". –û—à–∏–±–∫–∏: " . (isset($recaptchaResponse->{'error-codes'}) ? implode(', ', $recaptchaResponse->{'error-codes'}) : '–ù–µ—Ç'));
    die(json_encode(['success' => false, 'message' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.']));
}

echo json_encode(['success' => true, 'message' => '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!']);

if (function_exists('fastcgi_finish_request')) {
    fastcgi_finish_request(); 
} else {
    ob_end_flush();
    flush();
}

if (!defined('BOT_TOKEN') || !defined('CHAT_ID')) {
    error_log("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.");
    exit();
}

$name = htmlspecialchars(trim($_POST['name'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), ENT_QUOTES, 'UTF-8');
$phone = htmlspecialchars(trim($_POST['phone'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), ENT_QUOTES, 'UTF-8');
$email = filter_var(trim($_POST['email'] ?? ''), FILTER_SANITIZE_EMAIL);
if (!empty($email) && !filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $email = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: " . htmlspecialchars($email, ENT_QUOTES, 'UTF-8');
}
$message = htmlspecialchars(trim($_POST['message'] ?? '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'), ENT_QUOTES, 'UTF-8');
$formType = htmlspecialchars(trim($_POST['form_type'] ?? '–ó–∞–∫–∞–∑'), ENT_QUOTES, 'UTF-8');

$telegramMessage = "üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"; 
$telegramMessage .= "üë§ *–ò–º—è:* " . $name . "\n";
$telegramMessage .= "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* " . $phone . "\n";

if (!empty($email)) {
    $telegramMessage .= "üìß *Email:* " . $email . "\n";
}

if (trim($_POST['message'] ?? '') !== '') { 
    $telegramMessage .= "‚úâÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n" . $message . "\n";
}

$telegramApiUrl = 'https://api.telegram.org/bot' . BOT_TOKEN . '/sendMessage';
$telegramData = [
    'chat_id' => CHAT_ID,
    'text' => $telegramMessage,
    'parse_mode' => 'Markdown', 
    'disable_web_page_preview' => true
];

if (defined('MESSAGE_THREAD_ID') && MESSAGE_THREAD_ID !== null) {
    $telegramData['message_thread_id'] = MESSAGE_THREAD_ID;
}

$chTelegram = curl_init($telegramApiUrl);
curl_setopt($chTelegram, CURLOPT_POST, true);
curl_setopt($chTelegram, CURLOPT_POSTFIELDS, json_encode($telegramData));
curl_setopt($chTelegram, CURLOPT_RETURNTRANSFER, true);
curl_setopt($chTelegram, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
curl_setopt($chTelegram, CURLOPT_TIMEOUT, 5);
$telegramResultJson = curl_exec($chTelegram);
$telegramCurlError = curl_error($chTelegram);
curl_close($chTelegram);

if ($telegramResultJson === false) {
    error_log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram. –û—à–∏–±–∫–∞: " . $telegramCurlError . ". –î–∞–Ω–Ω—ã–µ: " . json_encode($telegramData));
} else {
    $telegramResponse = json_decode($telegramResultJson);
    if (!$telegramResponse || !$telegramResponse->ok) {
        error_log("–û—à–∏–±–∫–∞ Telegram API. –û—Ç–≤–µ—Ç: " . $telegramResultJson);
    }
}

if (defined('LOG_FILE')) {
    $logData = [
        'timestamp' => date('Y-m-d H:i:s'),
        'form_type' => $formType, 
        'name' => $name,
        'phone' => $phone,
        'email' => $email,
        'message' => $message,
        'ip' => $_SERVER['REMOTE_ADDR'] ?? 'N/A',
        'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'N/A',
        'telegram_sent' => ($telegramResultJson !== false && isset(json_decode($telegramResultJson)->ok) && json_decode($telegramResultJson)->ok)
    ];
    $logEntry = json_encode($logData, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT) . "\n---\n";

    if (defined('LOG_MAX_SIZE') && file_exists(LOG_FILE) && filesize(LOG_FILE) > LOG_MAX_SIZE) {
        @file_put_contents(LOG_FILE, $logEntry, LOCK_EX);
    } else {
        @file_put_contents(LOG_FILE, $logEntry, FILE_APPEND | LOCK_EX);
    }
}

exit();
