// server.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
// –í Coolify —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "Environment Variables"
require('dotenv').config(); 

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
const express = require('express');
const bodyParser = require('body-parser');
const fetch = require('node-fetch'); // –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (Node.js 18+ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–π fetch)
const { URL } = require('url'); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ URL referer

const app = express();
// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –≤–∞—à–µ Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
// Coolify –±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ä—Ç.
const port = process.env.PORT || 3000; 

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ URL-encoded –¥–∞–Ω–Ω—ã—Ö –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
// maxBytesLimit - —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏—Ö —Ñ–æ—Ä–º –∏–ª–∏ reCAPTCHA –æ—Ç–≤–µ—Ç–æ–≤
app.use(bodyParser.json({ limit: '10mb' })); 
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram –∏ reCAPTCHA ---
// –í Coolify —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "Environment Variables"
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const RECAPTCHA_SECRET_KEY = process.env.RECAPTCHA_SECRET_KEY;

// RECAPTCHA_THRESHOLD –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
const RECAPTCHA_THRESHOLD = parseFloat(process.env.RECAPTCHA_THRESHOLD || '0.5'); 

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ referer
// –í Coolify —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –∑–∞–ø—è—Ç—ã–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "av3d.by,www.av3d.by"
const ALLOWED_DOMAINS_ENV = process.env.ALLOWED_DOMAINS;
const ALLOWED_DOMAINS = ALLOWED_DOMAINS_ENV 
    ? ALLOWED_DOMAINS_ENV.split(',').map(d => d.trim()) 
    : ['av3d.by', 'www.av3d.by']; // –ó–¥–µ—Å—å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã –≤–∞—à–∏ –¥–æ–º–µ–Ω—ã 'av3d.by' –∏ 'www.av3d.by'

// MIN_FORM_SUBMIT_TIME –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
const MIN_FORM_SUBMIT_TIME = parseInt(process.env.MIN_FORM_SUBMIT_TIME || '5', 10);

// --- –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –ø—É—Ç—å!
app.post('/includes/send-telegram', async (req, res) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type –¥–ª—è JSON-–æ—Ç–≤–µ—Ç–∞
    res.setHeader('Content-Type', 'application/json');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Referer (–∑–∞—â–∏—Ç–∞ –æ—Ç CSRF –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
    const refererHeader = req.headers.referer;
    let refererHostname = '';
    try {
        if (refererHeader) {
            refererHostname = new URL(refererHeader).hostname;
        }
    } catch (e) {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Referer:', refererHeader);
        // –ï—Å–ª–∏ referer –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –º–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, refererHostname –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –∏ –Ω–µ –±—É–¥–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º 'localhost' –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ ALLOWED_DOMAINS
    const currentAllowedDomains = [...ALLOWED_DOMAINS];
    if (process.env.NODE_ENV !== 'production' && !currentAllowedDomains.includes('localhost')) {
        currentAllowedDomains.push('localhost');
    }

    if (!currentAllowedDomains.includes(refererHostname)) {
        console.error(`–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π referer '${refererHostname}' –∏–∑ '${refererHeader}'`);
        return res.status(403).json({ success: false, message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.' });
    }

    // 2. Honeypot (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –±–æ—Ç–æ–≤)
    // –ï—Å–ª–∏ –ø–æ–ª–µ 'website' –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —ç—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –±–æ—Ç.
    if (req.body.website) { 
        console.log('Honeypot —Å—Ä–∞–±–æ—Ç–∞–ª. –ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞.');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –±–æ—Ç—ã –¥—É–º–∞–ª–∏, —á—Ç–æ –≤—Å–µ –æ–∫
        return res.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.' });
    }

    // 3. –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if (MIN_FORM_SUBMIT_TIME && req.headers['x-form-submit-time']) {
        const submitTime = parseInt(req.headers['x-form-submit-time'], 10); 
        if (isNaN(submitTime) || (Date.now() / 1000) - submitTime < MIN_FORM_SUBMIT_TIME) {
            console.warn(`–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (${(Date.now() / 1000) - submitTime} —Å–µ–∫).`);
            return res.status(429).json({ success: false, message: '–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.' });
        }
    }


    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
    const recaptchaResponse = req.body.recaptcha_response;
    if (!recaptchaResponse) {
        console.error('–û—à–∏–±–∫–∞ reCAPTCHA: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
        return res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ reCAPTCHA: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    }

    if (!RECAPTCHA_SECRET_KEY || isNaN(RECAPTCHA_THRESHOLD)) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: RECAPTCHA_SECRET_KEY –∏–ª–∏ RECAPTCHA_THRESHOLD –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.');
        return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }

    try {
        const recaptchaVerifyUrl = 'https://www.google.com/recaptcha/api/siteverify';
        const recaptchaData = new URLSearchParams({
            secret: RECAPTCHA_SECRET_KEY,
            response: recaptchaResponse,
            remoteip: req.ip || req.connection.remoteAddress // IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        });

        const recaptchaResult = await fetch(recaptchaVerifyUrl, {
            method: 'POST',
            body: recaptchaData
        });
        const recaptchaJson = await recaptchaResult.json();

        if (!recaptchaJson.success || (typeof recaptchaJson.score === 'number' && recaptchaJson.score < RECAPTCHA_THRESHOLD)) {
            console.error('–ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', JSON.stringify(recaptchaJson, null, 2));
            const errorCodes = recaptchaJson['error-codes'] ? `–û—à–∏–±–∫–∏: ${recaptchaJson['error-codes'].join(', ')}` : '';
            return res.status(400).json({ 
                success: false, 
                message: `–ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. ${errorCodes}` 
            });
        }

        // --- 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ---
        if (!BOT_TOKEN || !CHAT_ID) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.');
            return res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ (Telegram).' });
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
        const name = req.body.name ? String(req.body.name).trim() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const phone = req.body.phone ? String(req.body.phone).trim() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        let email = req.body.email ? String(req.body.email).trim() : '';
        if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) { // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
            email = `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: ${email}`;
        }
        const message = req.body.message ? String(req.body.message).trim() : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è';
        const formType = req.body.form_type ? String(req.body.form_type).trim() : '–ó–∞–∫–∞–∑';

        const telegramMessage = `üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (${formType})*\n\n` +
                                `üë§ *–ò–º—è:* ${name}\n` +
                                `üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}\n` +
                                (email ? `üìß *Email:* ${email}\n` : '') +
                                (message && message !== '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' ? `‚úâÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${message}\n` : '');

        const telegramApiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        const telegramData = {
            chat_id: CHAT_ID,
            text: telegramMessage,
            parse_mode: 'Markdown', // –ò–ª–∏ 'HTML', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            disable_web_page_preview: true
        };

        // –î–æ–±–∞–≤–ª—è–µ–º message_thread_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (process.env.MESSAGE_THREAD_ID) {
            const messageThreadId = parseInt(process.env.MESSAGE_THREAD_ID, 10);
            if (!isNaN(messageThreadId)) {
                telegramData.message_thread_id = messageThreadId;
            }
        }

        const telegramResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(telegramData)
        });

        const telegramResult = await telegramResponse.json();

        if (telegramResult.ok) {
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
            res.json({ success: true, message: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' });
        } else {
            console.error('–û—à–∏–±–∫–∞ Telegram API:', JSON.stringify(telegramResult, null, 2));
            res.status(500).json({ success: false, message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${telegramResult.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` });
        }

    } catch (error) {
        console.error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
});

// --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---
// –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞—à–µ–º—É Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –æ—Ç–¥–∞–≤–∞—Ç—å index.html –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã.
// –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≤—Å–µ –≤–∞—à–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
// (index.html, assets/, includes/ - –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è PHP-—Å–∫—Ä–∏–ø—Ç–∞–º–∏)
// –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±—É–¥–µ—Ç /app.
app.use(express.static(__dirname)); // –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (/app)

// –°–ª—É—à–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç
app.listen(port, () => {
    console.log(`Node.js Server listening on port ${port}`);
    console.log(`Access at http://localhost:${port}`); // –¢–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
});
